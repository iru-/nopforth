\ SPDX-License-Identifier: MIT
\ Copyright (c) 2018-2024 IruatÃ£ Martins dos Santos Souza

forth
1 value RTLD_LAZY

variable handle

: errorstr ( -> a u )   dlerror dup if z>mem exit then  0 ;
: ?clib-abort ( flag -> )   errorstr ?abort ;

: (clib-open) ( name #name -> handle )
   dup if  s>z  else  nip 0  then   RTLD_LAZY dlopen ;

: clib-open ( name #name -> handle )
   (clib-open) dup 0 = ?clib-abort ;

: clib-symbol ( a u -> 'func )
   s>z handle @ swap  dlsym dup 0 = ?clib-abort ;

: cfunc>entry ( Cname #Cname nopname #nopname -> definition )
   2push clib-symbol  2pop entry,  codep @ swap >cfa ! ;


: callC0  \ no input arguments, only create space for return value
   ` dup ;

: callC, ( #args #ret definition -> )
   push swap  prolog,
   dup 5 > " too many arguments to C function" ?abort
   dup 4 > if callC5 then
   dup 3 > if callC4 then
   dup 2 > if callC3 then
   dup 1 > if callC2 then
       0 > if callC1 else
              callC0 then
   pop call,  0 = if ` drop then  epilog, ` exit ;

: no-dot? ( a u -> bool )   [char] . scan nip 0 = ;

: shortcut->real-name ( a u -> a' u' )
   2dup no-dot? if   extension string+   then ;

( User API )
: Clibrary:
   create  latest @ @ definition-name@ shortcut->real-name clib-open  dup , handle !
   does> @ handle ! ;

\ Return the local name by which Cname will be called
: local-name ( Cname #Cname -> Cname #Cname localname #localname )
   word dup 0 = if  2drop 2dup  then ;

: Cfunction: ( #args #ret -> ) ( input: "Cname" "localname" )
   word local-name  cfunc>entry callC, ;

Clibrary: libc
