\ SPDX-License-Identifier: MIT
\ Copyright (c) 2018-2020 IruatÃ£ Martins dos Santos Souza

1 value RTLD_LAZY

: errorstr ( -> a u )   dlerror dup if z>mem exit then  0 ;
: ?clib-abort ( flag -> )   errorstr ?abort ;

: clib-load ( a u -> handle )
   dup if  s>z  else  2drop 0  then
   RTLD_LAZY dlopen dup 0 = ?clib-abort ;

: clib-symbol ( handle a u -> 'func )
   s>z dlsym dup 0 = ?clib-abort ;

: cfunc>entry ( handle Cname #Cname nopname #nopname -> 'func )
   2push clib-symbol  2pop entry,  here swap >cfa ! ;

\ System V x86-64 ABI requires a stack aligned on a 16 bytes boundary.
\ The prolog saves the return stack pointer on rbx since the latter must be
\ saved by the callee, and so is guaranteed to be preserved across the call.
\ Lastly, the prolog forces the stack alignment. The epilog thus restores
\ the return stack pointer, which may or may not be aligned.
: prolog   $E38948 3, $F0E48348 4, ;   \ mov %rbp, %rbx; and $-16, %rsp
: epilog   $DC8948 3, ;                \ mov %rbx, %rsp

: callC5   $C08949 3, ` drop ;
: callC4   $C18948 3, ` drop ;
: callC3   $C28948 3, ` drop ;
: callC2   $C68948 3, ` drop ;
: callC1   $C78948 3, ;

: callC0  \ no input arguments, only create space for return value
   ` dup ;

: xcall,   here call! allot ;

: callC, ( #ret #args 'func -> )
   push  prolog
   dup 5 > " too many arguments to C function" ?abort
   dup 4 > if callC5 then
   dup 3 > if callC4 then
   dup 2 > if callC3 then
   dup 1 > if callC2 then
       0 > if callC1 else
              callC0 then
   pop xcall,  0 = if ` drop then  epilog ` exit ;

forth

( User API )
0 value handle

: library:
   handle if handle dlclose drop then
   word clib-load to handle ;

: Cfunction: ( #args #ret "Cname" "nopname" -> )
   swap  handle word word cfunc>entry  callC, ;
