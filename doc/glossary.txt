# Stack manipulation
dup ( n -> n n )
   Duplicate top element.

drop ( n -> )
   Remove top element.

swap ( m n -> n m )
   Swap top with second element.

over ( m n -> m n m )
   Copy second element to top.

nip ( m n -> n )
   Remove second element.

push ( n -> ) R( -> n )
   Push top of data stack to return stack.

pop R( n -> ) ( -> n )
   Pop top of return stack to data stack.

r@ R( n -> n ) ( -> n )
   Copy top of return stack to data stack.

rdrop R( n -> )
   Drop top of return stack.

rdec R( n -> n-1 )
   Decrement top of return stack.

2dup ( m n -> m n m n )
   Duplicate top two elements.

2push ( m n -> ) R( -> m n )
   Push top two elements of data stack to return stack.

2pop R( m n -> ) ( -> m n )
   Pop top two return stack elements to data stack.

tuck ( m n -> n m n )
   Insert top element in third place.

S0 variable
   Bottom of data stack.

sp@ ( -> a )
   Return the address of the top of the data stack.

depth ( -> u )
   Return current data stack depth.

.S
   Output data stack contents with top as the rightmost element.


# Operating System interface
sysread ( fd a u -> u' )
   Read at most `u` bytes from file descriptor `fd` into address `a`.
   Return number of bytes read.

syswrite ( fd a u -> u' )
   Write `u` bytes starting at address `a` to file descriptor `fd`.
   Return number of bytes written.

sysexit ( n -> )
   Exit process with status `n`.

open-file ( a u flags mode -> fd )
   Open file named by buffer in `mode` with `flags`.
   Return file descriptor.

create-file ( a u mode -> fd )
   Create file named by buffer and open it in given `mode`.
   Return file descriptor.

sysclose ( fd -> err )
   Close file descriptor `fd`.
   Return error code, 0 on success.

sysseek ( off ref fd -> off' )
   Reposition file descriptor `fd` to offset `off` relative to `ref`.
   On success, return resulting offset from beginning of file. On error,
   return -1.

file-position ( fd -> u  )
   Return current position of file descriptor.

fsize ( fd -> u )
   Return file size.

sysmmap ( addr length prot flags fh offset -> addr' )
   Map file to memory.
   Check OS manuals for the meaning of arguments and return value.

fmap ( fd -> a u )
   Map file to memory.
   Return pointer to mapped file.

sysmunmap ( a u -> err )
   Unmap file mapping at `a` with length `u`.

syscall1 ( n1 syscall# -> nr )
syscall2 ( n1 n2 syscall# -> nr )
syscall3 ( n1 n2 n3 syscall# -> nr )
syscall4 ( n1 n2 n3 n4 syscall# -> nr )
syscall5 ( n1 n2 n3 n4 n5 syscall# -> nr )
syscall6 ( n1 n2 n3 n4 n5 n6 syscall# -> nr)
   Call system call with given arguments.
   Return system call status.

dlopen dlsym dlerror dlclose
   Check your OS manuals for their description and usage.

#!
   Same as `\`.

#args variable
   Number of command line arguments.

arg ( i -> a u )
   Return buffer of ith command line argument.

next-arg ( -> a u )
   Return buffer of next unprocessed command line argument.

getenv ( var -> value )
   Return pointer to value of environment variable `var`.


# I/O
read-line ( a u fd -> # )
   Read at most `u` bytes from file descriptor into address `a`.
   Return number of bytes read. It will be less then `u` if less bytes are
   available or a newline is found.

read-byte ( fd -> b err )
   Read byte from file descriptor `fd`.
   Return byte and false on success, 0 and true on failure.

expect ( a u -> # )
   Same as `read-line` with current input as the file descriptor.

type ( a u -> )
   Write `u` bytes from address `a` to the current output.

emit ( b -> )
   Write byte to the current output.

'key variable
   Pointer to current `key` routine.

key ( -> b )
   Run current key routine. By default, read byte from the current input.
   Return byte on success, -1 on failure.

write-byte ( b fd -> n )
   Write byte to file descriptor.
   Return 1 on success, -1 on failure.

write-line ( a u fd -> # )
   Write buffer followed by a newline to file.
   Return number of bytes written on success, -1 on failure.

reset-input
   Reset current input buffer state.

refill ( -> n )
   Refill current input buffer, i.e. run current refill routine.
   Return number of bytes refilled `(> 0)` on sucess, `(<= 0)` on failure.

'refill variable
   Pointer to current input refill routine.

refilled? ( -> n )
   Execute `refill` if the current input buffer is exhausted.
   Return `n > 0` on sucess, `n < 0` on failure.

infd variable
   File descriptor from which to fill the input buffer.

inbuf variable
   Pointer to the input buffer.

intot variable
   Number of bytes allocated in the input buffer.

inused variable
   Number of used bytes in the input buffer.

inpos variable
   Position of first unprocessed byte in the input buffer.

source ( -> a u )
   Return unprocessed portion of the input buffer.

cr
   Emit ASCII newline.

space
   Emit ASCII space.

spaces ( u -> )
   Emit `u` ASCII spaces.

printable? ( b -> bool )
   Return true if it `b` is a printable ASCII character, `false` otherwise.

char ( -> u )
   Return ASCII code of next byte in the input buffer.

[char]
   Compile literal ASCII code of the next byte in the input letter.

(.) ( n -> )
   Output number.

. ( n -> )
   Same as `(.) space`.

.addr ( a -> )
   Output address in hex and zero-filled to the left.

hb. ( b -> )
   Output byte in hex.

bytes ( a u -> )
   Output bytes of buffer in hex, separated by a single space each.

c. ( b -> )
   Output byte if it is printable, dot otherwise.

text ( a u -> )
   Output `u` bytes of buffer using `c.`.

dump ( a u -> )
   Dump buffer in format `addr  hex-representation  ascii-representation`.

'rel variable
   Pointer to current `rel` routine.

rel
   Run current read-eval loop. See `refill` and `eval`.

'warm variable
   Pointer to current `warm` routine.

warm
   Run current warm boot. By default it is a nil routine.

(abort)
   Reset input, reset stacks and `warm` boot.

abort
   Output current source line and call `(abort)`.

?abort ( flag msg # -> )
   Execute `abort` if `flag` is not false.

?underflow
   Execute `abort` if data stack has underflowed.

evaluate ( -> ... )
   Same as `eval` with the input buffer as buffer.

included ( a u -> )
   Read and `evaluate` file named by buffer.

include
   Same as `included` with the remaining line in the input buffer as file name.
   This means file names can't have newline characters (ascii $A) in them.


# Memory
A buffer is defined as an address on second element and a length in the top
element, denoted by `a u`.

cell value
   Number of bytes in memory cell.

@ ( a -> n )
   Fetch cell from address `a`.

1@ ( a -> b )
   Fetch byte from address `a`.

! ( n a -> )
   Store cell at address `a`.

1! ( b a -> )
   Store byte at address `a`.

4! ( n a -> )
   Store 4-byte number `n` at address `a`.

a ( -> n )
   Return contents of register `a`.

a! ( n -> )
   Store `n` into register `a`.

@+ ( -> n )
   Fetch cell from address in register `a`. Increment a by 1 cell.

1@+ ( -> b )
   Fetch byte from address in register `a`. Increment a by 1.

!+ ( n -> )
   Store `n` into address in register `a`. Increment a by 1 cell.

1!+ ( b -> )
   Store byte into address in register `a`. Increment a by 1.

move ( src dst u -> )
   Copy `u` bytes from `src` to `dst`.

cells ( n -> n' )
   Convert number of cells to number of bytes.

advance ( a u n -> a+n u-n )
   Advance buffer by `n` bytes.

mem, ( a u -> )
   Write buffer to the dictionary.

mem= ( a1 u1 a2 u2 -> bool )
   Return true if the two buffer contents are equal, false otherwise.

skip ( a u delim -> a' u' )
   Skip sequence of delimeter byte in buffer.
   Return remaining buffer after the sequence, if any, or the same buffer.

scan ( a u delim -> a' u' )
   Scan buffer for delimiter byte.
   Return remaining buffer starting at the first delimiter. If the latter was
   not found, `u'` is zero.

number ( a u -> n err )
   Convert buffer to a number. If the first byte is $, the rest is treated as a
   positive hex number. If not, the whole buffer is treated as a decimal number.
   Return converted number and error, which is zero on success.

head ( a u b -> a u' )
   Scan buffer for a delimiter byte `b`.
   Return buffer from `a` to the last byte before the delimiter.

tail ( a u b -> a' u' )
   Scan buffer for a delimiter byte `b`.
   Return remaining buffer after first delimiter `b`.


# Strings
parse ( delim -> a u )
   Skip a sequence of delimiter byte in the input buffer.
   Return buffer from the first byte after the sequence up to the next
   delimiter.

word ( -> a u )
   Return next word from input buffer. A word is any sequence of non-whitespace
   bytes.

" ( -> a u )
   Return string delimited by next " in the input buffer.

" macro
   Compile string inside definition. At runtime, behave as `"`.

."
   Output string ended by next " in the input buffer.

println ( a u -> )
   Output string followed by newline.

s>z ( a u -> a' )
   Convert string to nul-terminated string. The contents are copied to the
   destination.

zlen ( a -> u )
   Return length of nul-terminated string.

z" ( -> a )
   Return address of nul-terminated string ended by next " in the input buffer.

z>mem ( a -> a u )
   Convert nul-terminated string to buffer. No copying is performed.

<# ( n -> 0 n )
   Expect a number on the stack to start pictured numeric conversion.

#> ( ... -> a u )
   End pictured numeric conversion.
   Return resulting buffer.

hold ( b -> )
   Add byte to picture.

# ( n -> )
   Add next digit of number to picture.

#s ( n -> )
   Add remaining digits of number to picture.

sign ( n -> )
   If number is negative, add minus character to picture.

abs ( n -> |n| )
   Convert number to its absolute value.


# Dictionary
The current dictionary is where definitions are compiled

flatest ( -> a )
   Return address of latest word defined in the forth dictionary.

mlatest ( -> a )
   Return address of latest word defined in the macro dictionary.

latest ( -> a )
   Return the address of latest word defined in the current dictionary.

macro
   Set macro as the current dictionary.

forth
   Set forth as the current dictionary.

1, ( b -> )
2, ( n -> )
3, ( n -> )
4, ( n -> )
, ( n -> )
   Store one-, two-, three-, four-, or cell-byte number in the dictionary.

entry, ( a u -> a' )
   Create empty dictionary entry named by buffer.
   Return address of entry.

entry
   Same as `entry` with name from the next input word.

created ( a u -> )
   Create definition named by buffer.
   When executed, returns the next dictionary address available at the time of
   its creation.

create
   Same as `created` with name from the next input word.

variable
   Create variable named by the next input word.

value
   Create value named by the next input word.

dfind ( name #name dict -> entry )
   Search entry with given `name` in dictionary `dict`.
   If found, return pointer to entry. If not, return 0.

find ( -> a )
   Same as `dfind` using the current dictionary.

?find ( -> a )
   Same as `find`, but `abort`s on definition not found.

' ( -> a )
   Search entry named by the next input word in the current dictionary.
   If found, return pointer to the code of the entry. If not, abort.

[']
   Same as `'`, but compiled return address as a literal.

f' ( -> a )
   Same as `'` but using the forth dictionary.

[f']
   Same as `[']` but using forth dictionary.

`
   Compile macro named by the next input word as a literal (instead of
   executing it).

does> ( a -> )
   Mark start of runtime behavior for a defining word.

to ( n -> )
   Store `n` to the value named by the next input word.

>cfa ( a -> cfa )
   Return code field address (CFA) for entry `a`.

cfa ( a -> a' )
   Return pointer to the code for entry `a`.

pfa ( a -> a' )
   Return parameter field address (PFA) for entry `a`.

h variable
   Dictionary pointer.

here ( -> a )
   Return next available address in dictionary space.

allot ( n -> )
   Advance dictionary pointer by `n`, i.e. consume `n` bytes of dictionary
   space.

call! ( a dst -> )
   Store call to `a` in `dst`.

call, ( a -> )
   Compile call to `a` in dictionary space.

]
   Switch to compilation mode.


[
   Switch to interpretation mode.

:
   Create definition named by the next input word.

anon: ( -> a )
   Create anonymous/headless definition.
   Return address of definition.

exit
   Return from definition.

;
   Compile `exit` and switch to execution mode.

lit ( n -> )
   Compile `n` as a literal to be pushed at runtime.

marker
   Create marker named by the next input word. When executed, the marker will
   restore the dictionary to the state before the marker was created.

empty
   Restore state of dictionary at boot.

record:
   Start record definition.

field: ( off size -> off' )
   Define record field named by the next input word. The field has given
   `offset` and `size`.
   Return offset after field, i.e. `off + size`.

bl value
   ASCII code for space character.


# Intepreter
execute ( a -> ... )
   Jump to word at address `a`.

eval ( a u -> ... )
   Evaluate source code in buffer.

   When interpreting:
   1. Search the word in the forth dictionary
   2. If found, `execute` it
   3. If not, search in the macro dictionary
   4. If found, `execute` it
   5. If not, convert to number
   6. If conversion succeeded, push number to stack
   7. If not, abort

   When compiling:
   1. Search the word in the macro dictionary
   2. If found, execute it
   3. If not, search in the forth dictionary
   4. If found, compile it
   5. If not, convert to number
   6. If conversion succeeded, compile literal
   7. If not, abort

   The itens left on the stack are the results from the evaluation.


# Arithmetic
+ ( m n -> m+n )
   Return sum of first and second elements.

- ( m n -> m-n )
   Return difference of second and first elements.

* ( m n -> m*n )
   Return product of first and second elements.

/ ( p q -> p/q )
   Return quotient of second and first elements.

mod ( p q -> r )
   Return remainder of division of the second by the first element.

/mod ( p q -> r p/q )
   Return remainder and quotient of second and first elements, respectively.

negate ( n -> -n )
   Invert sign of top element.


# Logic
false ( -> 0 )
   Return proper and only false value.

true ( -> -1 )
   Return proper true value. Note that any non-false value may be used as true.

= ( m n -> bool )
   Return true if top two elements are equal.

~= ( m n -> bool )
   Return true if top two elements are different.

< ( m n -> bool )
   Return true if the second element is lesser than the first.

> ( m n -> bool )
   Return true if the second element is greater than the first.

<= ( m n -> bool )
   Return true if the second element is lesser than or equal to the first.

>= ( m n -> bool )
   Return true if the second element is greater than or equal to the first.

not ( n -> ~n )
   Return logical negation of `n`, i.e. `false` becomes `true` and any
   non-false becomes `false`.

within ( n lo hi -> bool )
   Return true if `lo <= n < hi`.

min ( m n -> p )
   Return the lesser of the top two elements.


# Bitwise operations
lshift ( n p -> n' )
   Shift bits of `n` `p` places to the left.

rshift ( n p -> n' )
   Shift bits of `n` `p` places to the right.

and ( m n -> p )
   Return bitwise AND of the top two elements.

or ( m n -> p )
   Return bitwise OR of the top two elements.

xor ( m n -> p )
   Return bitwise XOR of the top two elements.

~ ( m n -> p )
   Return bitwise NOT of the top two elements.


# Miscellaneous
banner
   Output nop banner.

bye
   Exit with zero status.

\
   Comment remainder of current line.

(
   Comment until closing parenthesis or end of line, whichever comes first.

align ( a u -> a' )
   Return next `u`-byte aligned address starting from and including `a`.

aligned ( a -> a' )
   Return next cell aligned address starting from and including `a`.

Br
   Trap into debugger. x86_64 int3 instruction.


# Conditionals
if ( n -> )
   Branch if `n` is false, continue otherwise; drop `n` either way.

else
   Start alternative branch in an `if, i.e. when `n` is false.

then
   End an `if` conditional.

begin
   Begin indefinite loop.

while ( n -> )
   Stop indefinite loop if `n` is false, continue otherwise; drop `n` either way.

again
   Branch back to start of indefinite (`begin` only) loop.

repeat
   Branch back to start of indefinite (`begin-while`) loop.

for ( u -> )
   Start definite countdown loop of `u` steps.

next
   End a `for`-loop.
