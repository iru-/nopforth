\ SPDX-License-Identifier: MIT
\ Copyright (c) 2018-2020 IruatÃ£ Martins dos Santos Souza

macro
: 4! ( n a -> )
   $004D8B48 i4,           \ mov (%rbp), %rcx
   $0889 i2,               \ mov %ecx, (%rax)
   $086D8D4800458B48 i,    \ drop
   $086D8D4800458B48 i, ;  \ drop

: r@
   $00458948F86D8D48 i,  \ dup
   $24048B48 i4, ;       \ mov (%rsp), %rax

: rdrop   $48 i1, $0824648D i4, ;  \ lea 8(%rsp), %rsp
: rdec    $240CFF48 i4, ;   \ decq (%rsp)

: rshift ( n places -> n' )
   $48 i1, $C189 i2,     \ mov %rax, %rcx
   $086D8D4800458B48 i,  \ drop
   $48 i1, $E8D3 i2, ;   \ shr %cl, %rax

: lshift ( n places -> n' )
   $48 i1, $C189 i2,     \ mov %rax, %rcx
   $086D8D4800458B48 i,  \ drop
   $48 i1, $E0D3 i2, ;   \ shl %cl, %rax

: if ( -> a )
   $48 i1, $C085 i2,     \ test %rax, %rax
   $086D8D4800458B48 i,  \ drop
   $840F i2,             \ jz...
   codep @
   0 i4, ;               \ ...0

: then ( a -> )   0 hole !  codep @  over 4 + -  swap i4! ;

: branch ( dst -> )   codep @ 5 +  -  $E9 i1, i4, ;
: branch-unresolved ( -> a )   $E9 i1,  codep @  0 i4, ;
forth : /branch   5 ;

macro
: negate ( n -> n' )   $48 i1, $D8F7 i2, ;  \ neg %rax

forth
: call-rel! ( 'code dst -> #used )
   $E8 over i1!
   1 + dup push   \ save address where to store the offset
   4 +   -        \ compute offset
   pop i4!  5 ;

\ compile an absolute call:
\ movabs dst, %r11
\ call *%r11
: dst>r11! ( dst a -> a+10 )     a!  $BB $49  1!+ 1!+ !+  a ;
: callr11! ( a -> )              a!  $D3 $FF $41  1!+ 1!+ 1!+ ;
: call-abs! ( dst a -> #used )   dst>r11! callr11!  13 ;

: within ( u lo hi -> flag )  push over <=  swap pop <  and ;

: abs>off ( 'code dst -> )   5 + - ;
: 32bits? ( off -> flag )    -2147483648 2147483648 within ;

: call! ( 'code dst -> #consumed )
   codep @ hole !  over over abs>off 32bits? if call-rel! exit then call-abs! ;

macro : prolog ;

forth
: branch? ( a -> bool )
   1@ $E9 = ;

