\ SPDX-License-Identifier: MIT
\ Copyright (c) 2021-2022 Iruat√£ Martins dos Santos Souza

macro
: swap
   $AA0003E9 i,    \ mov x9, x0
   $F94003A0 i,    \ ldr x0, [fp]
   $F90003A9 i, ;  \ str x9, [fp]

: over
   $F94003A9 i,    \ ldr x9, [fp]
   $F81F8FA0 i,    \ dup
   $AA0903E0 i, ;  \ mov x0, x9

: nip
   $910023BD i, ;  \ add fp, fp, #8


: push
   $A9BF7FE0 i,    \ stp x0, xzr, [sp, #-16]!
   $F84087A0 i, ;  \ drop

: pop
   $F81F8FA0 i,    \ dup
   $A8C17FE0 i, ;  \ ldp x0, xzr, [sp], #16

: r@
   $F81F8FA0 i,    \ dup
   $F94003E0 i, ;  \ ldr x0, [sp]

: rdec
   $F94003E9 i,    \ ldr x9, [sp]
   $D1000529 i,    \ sub x9, x9, 1
   $F90003E9 i, ;  \ str x9, [sp]

: rdrop
   $910043FF i, ;  \ add sp, sp, #16


: @
   $F9400000 i, ;  \ ldr x0, [x0]

: 4@
   $B9400000 i, ;  \ ldr w0, [x0]

: 1@
   $39400000 i, ;  \ ldrb w0, [x0]

: !
   $AA0003E9 i,    \ mov x9, x0
   $F84087A0 i,    \ drop
   $F9000120 i,    \ str x0, [x9]
   $F84087A0 i, ;  \ drop

: 4!
   $AA0003E9 i,    \ mov x9, x0
   $F84087A0 i,    \ drop
   $B9000120 i,    \ str w0, [x9]
   $F84087A0 i, ;  \ drop

: 1!
   $AA0003E9 i,    \ mov x9, x0
   $F84087A0 i,    \ drop
   $39000120 i,    \ strb w0, [x9]
   $F84087A0 i, ;  \ drop

: a
   $F81F8FA0 i,    \ dup
   $AA1C03E0 i, ;  \ mov x0, x28

: a!
   $AA0003FC i,    \ mov x28, x0
   $F84087A0 i, ;  \ drop

: @+
   $F81F8FA0 i,    \ dup
   $F8408780 i, ;  \ ldr x0, [x28], #8

: 1@+
   $F81F8FA0 i,    \ dup
   $38401780 i, ;  \ ldrb w0, [x28], #1

: !+
   $f8008780 i,    \ str x0, [x28], #8
   $F84087A0 i, ;  \ drop

: 1!+
   $38001780 i,    \ strb w0, [x28], #1
   $F84087A0 i, ;  \ drop


: +
   $AA0003E9 i,    \ mov x9, x0
   $F84087A0 i,    \ drop
   $8B090000 i, ;  \ add x0, x0, x9

: -
   $AA0003E9 i,    \ mov x9, x0
   $F84087A0 i,    \ drop
   $CB090000 i, ;  \ sub x0, x0, x9

: /
   $AA0003E9 i,    \ mov x9, x0
   $F84087A0 i,    \ drop
   $9AC90C00 i, ;  \ sdiv x0, x0, x9

: *
   $AA0003E9 i,    \ mov x9, x0
   $F84087A0 i,    \ drop
   $9B097C00 i, ;  \ mul x0, x0, x9

: mod
   $AA0003E9 i,    \ mov x9, x0          x9  = d            (divisor)
   $F84087A0 i,    \ drop                x0  = a            (dividend)
   $9AC90C0A i,    \ sdiv x10, x0, x9    x10 = q = a/d      (ratio)
   $9B097D4B i,    \ mul x11, x10, x9    x11 =     q*d
   $CB0B0000 i, ;  \ sub x0, x0, x11     x0  = r = a - q*d  (remainder)

: /mod
   $AA0003E9 i,    \ mov x9, x0          x9  = d            (divisor)
   $F84087A0 i,    \ drop                x0  = a            (dividend)
   $9AC90C0A i,    \ sdiv x10, x0, x9    x10 = q = a/d      (ratio)
   $9B097D4B i,    \ mul x11, x10, x9    x11 =     q*d
   $CB0B0000 i,    \ sub x0, x0, x11     x0  = r = a - q*d  (remainder)
   $F81F8FA0 i,    \ dup
   $AA0A03E0 i, ;  \ mov x0, x10


: and
   $AA0003E9 i,    \ mov x9, x0
   $F84087A0 i,    \ drop
   $8A090000 i, ;  \ and x0, x0, x9

: or
   $AA0003E9 i,    \ mov x9, x0
   $F84087A0 i,    \ drop
   $AA090000 i, ;  \ orr x0, x0, x9

: xor
   $AA0003E9 i,    \ mov x9, x0
   $F84087A0 i,    \ drop
   $CA090000 i, ;  \ eor x0, x0, x9

: lshift
   $AA0003E9 i,    \ mov x9, x0
   $F84087A0 i,    \ drop
   $9AC92000 i, ;  \ lsl x0, x0, x9

: rshift
   $AA0003E9 i,    \ mov x9, x0
   $F84087A0 i,    \ drop
   $9AC92400 i, ;  \ lsr x0, x0, x9

: ~
   $AA2003E0 i, ;  \ mvn x0, x0

: negate
   $CB0003E0 i, ;  \ neg x0, x0


: =
   $F94003A9 i,    \ ldr x9, [fp]
   $EB00013F i,    \ cmp x9, x0
   $F84087A0 i,    \ drop
   $9A9F17E0 i,    \ cset x0, eq
   $92800009 i,    \ mov x9, #-1
   $9B097C00 i, ;  \ mul x0, x0, x9

: ~=
   $F94003A9 i,    \ ldr x9, [fp]
   $EB00013F i,    \ cmp x9, x0
   $F84087A0 i,    \ drop
   $9A9F07E0 i,    \ cset x0, ne
   $92800009 i,    \ mov x9, #-1
   $9B097C00 i, ;  \ mul x0, x0, x9

: <
   $F94003A9 i,    \ ldr x9, [fp]
   $EB00013F i,    \ cmp x9, x0
   $F84087A0 i,    \ drop
   $9A9FA7E0 i,    \ cset x0, lt
   $92800009 i,    \ mov x9, #-1
   $9B097C00 i, ;  \ mul x0, x0, x9

: <=
   $F94003A9 i,    \ ldr x9, [fp]
   $EB00013F i,    \ cmp x9, x0
   $F84087A0 i,    \ drop
   $9A9FC7E0 i,    \ cset x0, le
   $92800009 i,    \ mov x9, #-1
   $9B097C00 i, ;  \ mul x0, x0, x9

: >
   $F94003A9 i,    \ ldr x9, [fp]
   $EB00013F i,    \ cmp x9, x0
   $F84087A0 i,    \ drop
   $9A9FD7E0 i,    \ cset x0, gt
   $92800009 i,    \ mov x9, #-1
   $9B097C00 i, ;  \ mul x0, x0, x9

: >=
   $F94003A9 i,    \ ldr x9, [fp]
   $EB00013F i,    \ cmp x9, x0
   $F84087A0 i,    \ drop
   $9A9FB7E0 i,    \ cset x0, ge
   $92800009 i,    \ mov x9, #-1
   $9B097C00 i, ;  \ mul x0, x0, x9


macro
\ See offset-multiplier@ for the meaning of the offset-multiplier
: if ( -> a )
   $AA0003E9 i,    \ mov x9, x0
   $F84087A0 i,    \ drop
   codep @
   $B4000409 i, ;  \ cbz x9, offset-multiplier = 32

: branch ( dst -> )
   codep @ -  4 /  $3FFFFFF and  $14000000 +  i, ;  \ b dst

: branch-unresolved ( -> a )
   codep @  $14000020 i, ;  \ b offset-multiplier = 1

forth
: /branch   4 ;

: offset-multiplier@ ( 'instr -> u )
   \ `if` uses cbz and requires the offset to be multiplied by 32,
   \ `branch-unresolved` uses b and requires multiplication by 1.
   \ Both macros encode their multiplier in the instruction itself.
   \ For `then` to work in both cases, it should multiply the given offset
   \ by the value returned by this routine
   @ $7E0 and  5 rshift ;

: ~ ~ ;
: clean-offset@ ( 'instr -> u )
   @ [ $7E0 ~ ] lit  and ;

: instr-offset ( 'instr -> )
  codep @ swap -  4 / ;

macro
: xthen ( 'instr -> )
   dup instr-offset
   over offset-multiplier@ *
   over clean-offset@ +  swap i! ;

: then ( 'instr -> )
   dup offset-multiplier@  over instr-offset *
   over clean-offset@ +  swap i! ;


macro
: prolog
   $A9BF7FFE i, ;  \ stp x30, xzr, [sp, #-16]!

forth
: hole ( -> a )
   [ here 0 , ] lit ;

: branch? ( a -> bool )
   4@ $FC000000 and  24 rshift  $14 = ;

: ret?  \ check for: ldp x30, xzr, [sp], #16; ret
   @ $D65F03C0A8C17FFE = ;

: within ( n lo hi -> bool )
   push over <=  swap pop <  and ;

: NOPARCH ( -> a u )
   [ 5 here  $61 1, $72 1, $6D 1, $36 1, $34 1, ] lit lit ;
