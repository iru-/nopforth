\ SPDX-License-Identifier: MIT
\ Copyright (c) 2018-2022 IruatÃ£ Martins dos Santos Souza

forth
: digit ( n -> n' )   dup 9 >  [ char a char 9 - 1 - ] lit  and +  48 + ;

: hold ( count rem b -> b count+1 rem )   swap push  swap 1 + pop ;

: <# ( n -> 0 n )               0 swap ;
: (#)  ( n base -> ... count rem )   /mod swap digit hold ;
: # ( n -> ... count rem )      10 (#) ;
: h# ( n -> ... count rem )     dup 4 rshift  swap 15 and digit hold ;
: #> ( ... count rem -> a u )   asave  drop  pad a!  dup push for 1!+ next  pad pop  arest ;
: #s ( n -> ... count rem )     begin # dup while repeat ;
: h#s ( n -> ... count rem )    begin h# dup while repeat ;

: abs ( n -> |n| )   dup 0 < if negate then ;
: sign ( n -> )   0 < if  [char] - hold  then ;

: (.) ( n -> a u )   dup push abs <#  #s pop sign #> ;
: . ( n -> )     (.) type space ;

: (h.) ( n -> a u )   <# h#s #> ;
: h. ( n -> )     (h.) type space ;

: justify ( u #column -> )   swap - 0 max for  32 hold  next ;
: (.r) ( n #column -> a u )   push dup push abs <#  #s pop sign  over pop justify #> ;
: .r ( n #column -> )   (.r) type space ;

: (h.r) ( n #column -> a u )   push <# h#s  over pop justify #> ;
: h.r ( n #column -> )     (h.r) type space ;

: .S   depth S0 2 cells - swap for  dup @ . cell -  next drop  ." <- top " ;
: h.S   depth S0 2 cells - swap for  dup @ h. cell -  next drop  ." <- top " ;

: spfill ( u -> )    16 swap - 3 * spaces  space ;
: .addr ( a -> )     <# cell for h# h# next #> type ;
: hb. ( u -> )       <# bl hold h# h# #> type ;
: bytes ( a u -> )   swap a! for 1@+ hb. next ;
: c. ( c -> )        dup printable? not if  drop [char] .  then  emit ;
: text ( a u -> )    swap a! for 1@+ c. next ;
: line ( a u -> )    over .addr 2 spaces  2dup bytes dup spfill  text cr ;

: dump ( a u -> )
   begin dup while
      2dup 16 min line
       dup 16 min advance
   repeat
   drop drop ;
